
// Settings->Developer settings -> Personal access tokens -> Tokens
// 저장소->저장소설정->https://Heejinee3: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@github.com/Heejinee3/hello-git-cli.git
// 복사 Ctrl+Insert
// 붙여넣기 Shift+Insert

# 
// add: working directory -> stage
// commit: stage -> commit
// push: commit -> remote
// reset: working directory <- stage
// clone: working directory <- remote
// pull

// git reset --soft
// git reset --mixed
// git reset --hard

# Order

    git init
    git config --global user.email "naahah79@naver.com"   // user email 등록
    git config --global user.name "Heejinee3"             // user name 등록
    git config --global core.editor "code --wait"         // 기본 에디터를 visual studio code로 등록

git remote add origin https://github.com/Heejinee3/iTshirt.git
git push origin master
git clone https://github.com/Heejinee3/iTshirt.git .

# Status

    git status    // 상태를 보여줌
    git status -s // 요약

    /* untracked : stage에 없는 파일
       staged    : stage에 있지만 commit이 되기 전 상태
       unmodified: stage에 있고 commit이 된 상태
       modified  : stage에 있지만 수정이되어 다시 stage에 올려야하는 상태 */
    
# Option

    git config --<global|local|system> <option>           // 전역/지역/시스템 옵션 보기
    git config --<global|local|system> <option> <"value"> // 전역/지역/시스템 옵션 설정
    git config --<global|local|system> --unset <option>   // 전역/지역/시스템 옵션 삭제

    git config --list                                     // 모든 옵션 보기

# Commit

    git add <file1> <file2> ...   // stage에 file 올리기
    git add .                     // 모든 파일 stage에 올리기

    git reset <file1> <file2> ... // file을 stage에서 내리기
    git reset .                   // 모든 파일 stage에서 내리기

    git commit -a                 // add 명령을 생략하고 commit하기(untracked 파일은 커밋되지 않음)
    git commit -m <"explanation"> // 설명과 함께 commit 하기
    git commit                    // 에디터가 열리면서 제목과 설명 입력 가능(첫째줄에 제목, 3번째 줄에 설명)

# Log

    git log			   // 이전 commit 보기
    git log -n<number> // n       : 최신 n개의 커밋을 보여줌
    git log --oneline  // oneline : 한 줄로 요약
    git log --graph    // graph   : 그래프 흐름을 보여줌
    git log --decorate // decorate: 브랜치와 태그 등의 참조를 간결히 표시
    git log --all      // all     : HEAD와 관계없는 옵션도 보여줌

# Help

    git help <command>

# Push(local->remote)

    git remote add <remoteName> <remoteUrl> // 원격 저장소 지정
    git remote -v                           // 원격 저장소 확인

    git push <remoteName> <localBranch>     // 원격 저장소에 local branch 올리기 
    git push -u <remoteName> <localBranch>  // local branch에 원격 저장소의 branch를 연결하면서 올리기
                                            // 나중에 git push만 입력해도 됨

# Pull(remote->local)
  
    git clone <remoteUrl>               // 원격 저장소 이름의 폴더가 생성하면서 소스 다운받기
    git clone <remoteUrl> .             // 현재 폴더에 소스 다운받기
    git clone <remoteUrl> <folder>      // folder를 생성하면서 소스 다운받기

    git pull <remoteName> <localBranch> // 원격 저장소의 새로운 커밋들을 로컬로 받기
    
# Branch

    git branch                                // 로걸 저장소의 브랜치 보기
    git branch -v                             // 마지막 커밋과 함께 표시
    git branch <branch>                       // HEAD로부터 브랜치 만들기 
    git branch -f <branch>                    // 이미 있는 브랜치 옮기기
    git branch <branch> <checksum>            // checksum에 위치한 브랜치 만들기
    git branch -r                             // 원격 저장소의 브랜치 보기

    git branch -d <branch>                    // 브랜치 지우기(HEAD와 병함되지 않은 브랜치는 삭제 불가능)
    git branch -D <branch>                    // 브랜치 지우기(-d로 지우지 못한 브랜치까지 가능)
    
    git checkout <branch>                     // 해당 브랜치로 HEAD 옮기기 = git switch <branch>
    git checkout -b <branch> <checksum>       // checksum(or branch)에 위치한 브랜치를 만들고 checkout 하기 = git switch -c <branch>

    git reset --hard <checksum>               // 현재 브랜치를 지정 커밋으로 이동(repository, stage, working directory)
    git reset --mixed <checksum>              // 현재 브랜치를 지정 커밋으로 이동(repository, stage)
    git reset --soft <checksum>               // 현재 브랜치를 지정 커밋으로 이동(repository)

    /* HEAD~<number>: number번째 조상
       HEAD^<number>: number번째 부모(ex. 병합 커밋) */

# Merge

    git merge <branch> // branch 병합
    git merge --abort  // 병합 취소
    /* merge 중 conflict가 발생했을 경우
       파일에서 충돌을 해결하고, add로 stage에 올린 후 commit한다 */

    git rebase <branch>
    git rebase --continue
    /* rebase 중 conflict가 발생했을 경우
       파일에서 충돌을 해결하고, add로 stage에 올린후 rebase continue를 한다
       이전 기록을 다시 고치므로 강제 푸시를 해야할 수도 있다
       git push <remoteName> <localBranch> --force */

# Tag

    git tag -a -m <"message"> <tagName> <checksum> // tag 붙이기

    git rebase < 대상프랜치>
    git revert <브랜치>
    git restore

git fetch [원격저자오별명] [브랜치이름]
git merge 브랜치이름
git switch <branch>






    git checkout 5813bb5 // 해당 commit으로 돌리기
    git checkout -			 // 바로 이전 commit으로 돌리기



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